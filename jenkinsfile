node {
  def hostIP = '' //IP del servidor donde corre Jenkins
  def sonarUrl = '' //URL de SonarQube construida din√°micamente
  def projectKey = 'test_php' //Clave del proyecto en SonarQube
  def reportRecipients = 'sergio.zabbix01@gmail.com, equipoti.vg@gmail.com' //Destinatarios del reporte

  stage('1. Checkout') {
    echo 'Descargando c√≥digo del repositorio...'
    checkout scm
  }

  stage('2. Obtener IP del Host') {
    echo 'Obteniendo IP del host...'
    script {
      hostIP = sh(script: "hostname -I | awk '{print \$1}'", returnStdout: true).trim()
      sonarUrl = "http://${hostIP}:9000"
      echo "‚úÖ IP del host: ${hostIP}"
      echo "‚úÖ URL de SonarQube: ${sonarUrl}"
    }
  }

  stage('3. An√°lisis SonarQube') {
    echo 'üî¨ Ejecutando an√°lisis de SonarQube...'
    script {
      def scannerHome = tool 'sonar'
      
      withCredentials([string(credentialsId: '2', variable: 'SONAR_TOKEN')]) {
        withSonarQubeEnv('sonar') {
          sh "${scannerHome}/bin/sonar-scanner"
        }
      }
      
      echo '‚è≥ Esperando a que SonarQube procese los resultados...'
      sleep time: 5, unit: 'SECONDS'
    }
  }

  stage('4. Preparar Entorno Python') {
    echo 'Configurando entorno virtual de Python...'
    sh '''
      set -e
      python3 -m venv .venv
      . .venv/bin/activate
      pip install --upgrade pip
      pip install -r requirements.txt
    '''
  }

  stage('5. Generar Reporte HTML') {
    echo 'Generando reporte HTML desde SonarQube...'
    script {
      withCredentials([string(credentialsId: '2', variable: 'SONAR_TOKEN')]) {
        //! Generar reporte PDF desde SonarQube <IP_ADDRESS>:9000
        sh """
          python3 generate_report_html.py \
            --sonar-url ${sonarUrl} \
            --project-key ${projectKey} \
            --token ${SONAR_TOKEN} \
            --output report.html \
            --template report_template_v2.html
        """
        echo '‚úÖ Reporte HTML generado exitosamente'
      }
    }
  }

  stage('6. Convertir a PDF') {
    echo 'Convirtiendo reporte a formato PDF...'
    sh '''
      # Convertir con pandoc
      #pandoc report.html -o reporte_pandoc.pdf
      
      # Convertir con wkhtmltopdf
      wkhtmltopdf --enable-local-file-access report.html reporte_wkhtmltopdf.pdf
    '''
    echo '‚úÖ Reportes PDF generados exitosamente'
  }

  stage('7. Enviar Reporte por Email') {
    echo 'Enviando reporte por correo electr√≥nico...'
    emailext(
      subject: "‚úÖ SonarQube Report: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
      body: """
        <h2>Informe de An√°lisis SonarQube</h2>
        <p><strong>Proyecto:</strong> ${projectKey}</p>
        <p><strong>Build:</strong> #${env.BUILD_NUMBER}</p>
        <p><strong>SonarQube URL:</strong> <a href="${sonarUrl}">${sonarUrl}</a></p>
        <p><strong>IP del Host:</strong> ${hostIP}</p>
        <hr>
        <p>Adjunto encontrar√°s los informes PDF generados con diferentes herramientas.</p>
      """,
      to: reportRecipients,
      mimeType: 'text/html',
      attachmentsPattern: """reporte_${projectKey}_${env.BUILD_NUMBER}.pdf"""
    )
    echo '‚úÖ Email enviado exitosamente'
  }

  stage('8. Limpieza') {
    echo 'üßπ Limpiando archivos temporales...'
    sh '''
      # Limpiar archivos temporales de Python
      # rm -rf .venv
    '''
    echo '‚úÖ Archivos temporales eliminados'
  }

    stage('9. Comprobar vulnerabilidades (umbral de despliegue)') {
      script {
        // check_vulnerabilities.py devolver√° exit code 1 si hay vulnerabilidades bloqueantes
        def rc = sh(script: "python3 check_vulnerabilities.py report_summary.json", returnStatus: true)
        if (rc != 0) {
          // Abortamos el pipeline y marcamos fallo
          error("Se detectaron vulnerabilidades bloqueantes (high/major/critical). Despliegue abortado.")
        } else {
          echo "No hay vulnerabilidades bloqueantes: Listo para desplegar."
        }
      }
    }

    stage('10. Despliegue') {
      // Despliegue sencillo al /var/www/html
      // IMPORTANTE: el agente que ejecute este paso debe tener permisos (sudo) o Jenkins corriendo con los permisos necesarios.
      // Usamos rsync para excluir .git y sincronizar limpiamente.
      sh '''
        set -e
        echo "Desplegando a /var/www/html/ ..."
        sudo rsync -av --delete --exclude='.git' ./ /var/www/html/
        echo "Despliegue completado."
      '''
    }
  }

  post {
    success {
      echo "Pipeline finalizado correctamente."
    }
    failure {
      echo "Pipeline fall√≥."
    }
}



/*
node {
  stage('SCM') {
    checkout scm
  }

  stage('SonarQube Analysis') {
    // 'sonar' aqu√≠ es el nombre que tengas en Manage Jenkins -> Global Tool Configuration (Sonar Scanner)
    

      sleep time: 5, unit: 'SECONDS'

    // sh '''
    //     set -e
    //     python3 -m venv .venv
    //     . .venv/bin/activate
    //     pip install --upgrade pip
    //     pip install -r requirements.txt
    //   '''
    // set -e
    //     . .venv/bin/activate
    //     ./.venv/bin/p
      

      //! Generar reporte PDF desde SonarQube <IP_ADDRESS>:9000
        sh '''
        python3 generate_report_html.py --sonar-url http://192.168.1.17:9000 --project-key test_php --token squ_a34d504f161871677db51e605aa7279670cb3abc --output report.html --template report_template_v2.html
        # convertir a PDF con pandoc usando xelatex o wkhtmltopdf
        pandoc reporte.html -o reporte_pandoc.pdf
        wkhtmltopdf --enable-local-file-access reporte.html reporte_wkhtmltopdf.pdf
      '''

      emailext(
        subject: "SonarQube report: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: "Adjunto el informe PDF de SonarQube para el proyecto test_php.",
        to: "sergio.zabbix01@gmail.com, equipoti.vg@gmail.com",
        mimeType: 'text/html',
        attachmentsPattern: 'reporte_pandoc.pdf, reporte_wkhtmltopdf.pdf'
      )
    }
  }
}*/