node {
  def hostIP = '' //IP del servidor donde corre Jenkins
  def sonarUrl = '' //URL de SonarQube construida dinámicamente
  def projectKey = 'test_php' //Clave del proyecto en SonarQube
  def reportRecipients = 'sergio.zabbix01@gmail.com, equipoti.vg@gmail.com' //Destinatarios del reporte

  stage('1. Checkout') {
    echo 'Descargando código del repositorio...'
    checkout scm
  }

  stage('2. Obtener IP del Host') {
    echo 'Obteniendo IP del host...'
    script {
      hostIP = sh(script: "hostname -I | awk '{print \$1}'", returnStdout: true).trim()
      sonarUrl = "http://${hostIP}:9000"
      echo "✅ IP del host: ${hostIP}"
      echo "✅ URL de SonarQube: ${sonarUrl}"
    }
  }

  stage('3. Análisis SonarQube') {
    echo 'Ejecutando análisis de SonarQube...'
    script {
      def scannerHome = tool 'sonar'
      
      withCredentials([string(credentialsId: '2', variable: 'SONAR_TOKEN')]) {
        withSonarQubeEnv('sonar') {
          sh "${scannerHome}/bin/sonar-scanner"
        }
      }
      
      echo 'Esperando a que SonarQube procese los resultados...'
      sleep time: 5, unit: 'SECONDS'
    }
  }

  stage('4. Preparar Entorno Python') {
    echo 'Configurando entorno virtual de Python...'
    sh '''
      set -e
      python3 -m venv .venv
      . .venv/bin/activate
      pip install --upgrade pip
      pip install -r requirements.txt
    '''
  }

  stage('5. Generar Reporte HTML') {
    echo 'Generando reporte HTML desde SonarQube...'
    script {
      withCredentials([string(credentialsId: '2', variable: 'SONAR_TOKEN')]) {
        //! Generar reporte PDF desde SonarQube <IP_ADDRESS>:9000
        sh """
          python3 generate_report_html.py \
            --sonar-url ${sonarUrl} \
            --project-key ${projectKey} \
            --token ${SONAR_TOKEN} \
            --output report.html \
            --template report_template_v2.html
        """
        echo '✅ Reporte HTML generado exitosamente'
      }
    }
  }

  stage('6. Convertir a PDF') {
    echo 'Convirtiendo reporte a formato PDF...'
    sh """
      # Convertir con pandoc
      #pandoc report.html -o reporte_pandoc.pdf
      
      # Convertir con wkhtmltopdf
      wkhtmltopdf --enable-local-file-access report.html reporte_${projectKey}_${env.BUILD_NUMBER}.pdf
    """
    echo '✅ Reportes PDF generados exitosamente'
  }

  stage('7. Comprobar vulnerabilidades (umbral de despliegue)') {
    script {
      // Ejecuta el script y captura su salida (multi-line)
      def out = sh(script: "python3 check_vulnerabilities.py report_summary.json", returnStdout: true).trim()
      // separar líneas de la salida
      def lines = out ? out.split("\\r?\\n") : []
      def firstLine = (lines.length > 0) ? lines[0].trim().toLowerCase() : ''
      // detalles sin la primera línea (para el email y logs), evita mostrar "true"/"false"
      def details = (lines.length > 1) ? (lines as List)[1..-1].join('\n') : ''

      echo "check_vulnerabilities output (raw):\n${out}"
      if (firstLine == 'true') {
        deploy_ok = true
        despliegue_msg = "<h3 style='color:green'>Despliegue autorizado</h3><p>No se detectaron vulnerabilidades peligrosas.</p><pre>${details}</pre>"
        echo "➡️ Deploy OK según summary: deploy_ok=true"
      } else if (firstLine == 'false') {
        deploy_ok = false
        despliegue_msg = "<h3 style='color:red'>Despliegue abortado</h3><p>Se detectaron vulnerabilidades peligrosas, no se ejecutará el despliegue automático.</p><pre>${details}</pre>"
        echo "➡️ Deploy NOT OK según summary: deploy_ok=false"
      } else {
        // salida inesperada: tratar como error de verificación
        deploy_ok = false
        despliegue_msg = "<h3 style='color:orange'>Verificación inválida</h3><p>Salida inesperada del verificador. Revisa los logs.</p><pre>${details}</pre>"
        echo "⚠️ Salida inesperada del script de comprobación: ${firstLine}"
      }
    }
  }

  stage('8. Despliegue') {
    script {
      if (deploy_ok) {
        echo "Ejecutando despliegue porque deploy_ok == true"
        sh '''
          set -e
          echo "Desplegando a /var/www/html/ ..."
          sudo rsync -av --delete --exclude='.git' ./ /var/www/html/
          echo "Despliegue completado."
        '''
      } else {
        echo "Despliegue abortado por verificación de vulnerabilidades."
      }
    }
  }

  stage('9. Enviar Reporte por Email con estado de despliegue') {
    script {
      def subject = deploy_ok ? "Despliegue AUTORIZADO: SonarQube Report ${env.JOB_NAME} #${env.BUILD_NUMBER}" :
                                "Despliegue ABORTADO: SonarQube Report ${env.JOB_NAME} #${env.BUILD_NUMBER}"
      def body = """
        <h2>Informe de Análisis SonarQube</h2>
        <p><strong>Proyecto:</strong> ${projectKey}</p>
        <p><strong>Build:</strong> #${env.BUILD_NUMBER}</p>
        <p><strong>SonarQube URL:</strong> <a href="${sonarUrl}">${sonarUrl}</a></p>
        <hr>
        ${despliegue_msg}
        <hr>
        <p>Adjunto informe PDF generado.</p>
      """
      emailext(
        subject: subject,
        body: body,
        to: reportRecipients,
        mimeType: 'text/html',
        attachmentsPattern: "reporte_${projectKey}_${env.BUILD_NUMBER}.pdf"
      )
      echo "✅ Email enviado (estado despliegue: ${deploy_ok})"
    }
  }

  stage('10. Limpieza') {
    echo 'Limpiando archivos temporales del entorno virtual.'
    sh '''
      # Limpiar archivos temporales de Python
      # rm -rf .venv
    '''
    echo '✅ Archivos temporales eliminados'
  }
}



/*
node {
  stage('SCM') {
    checkout scm
  }

  stage('SonarQube Analysis') {
    // 'sonar' aquí es el nombre que tengas en Manage Jenkins -> Global Tool Configuration (Sonar Scanner)
    

      sleep time: 5, unit: 'SECONDS'

    // sh '''
    //     set -e
    //     python3 -m venv .venv
    //     . .venv/bin/activate
    //     pip install --upgrade pip
    //     pip install -r requirements.txt
    //   '''
    // set -e
    //     . .venv/bin/activate
    //     ./.venv/bin/p
      

      //! Generar reporte PDF desde SonarQube <IP_ADDRESS>:9000
        sh '''
        python3 generate_report_html.py --sonar-url http://192.168.1.17:9000 --project-key test_php --token squ_a34d504f161871677db51e605aa7279670cb3abc --output report.html --template report_template_v2.html
        # convertir a PDF con pandoc usando xelatex o wkhtmltopdf
        pandoc reporte.html -o reporte_pandoc.pdf
        wkhtmltopdf --enable-local-file-access reporte.html reporte_wkhtmltopdf.pdf
      '''

      emailext(
        subject: "SonarQube report: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: "Adjunto el informe PDF de SonarQube para el proyecto test_php.",
        to: "sergio.zabbix01@gmail.com, equipoti.vg@gmail.com",
        mimeType: 'text/html',
        attachmentsPattern: 'reporte_pandoc.pdf, reporte_wkhtmltopdf.pdf'
      )
    }
  }
}*/